import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

from google.colab import files
uploaded=files.upload()

df=pd.read_csv('student_scores.csv')

df

df.head()


df.describe()

#checking all null values


df.isnull()

df.plot()



df.plot(x='Hours',y='Scores')
plt.title("Hours vs Percentage of Scores")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage scores")
plt.show()

df.plot(x='Hours',y='Scores',style="o")
plt.title("Hours vs Percentage of Scores")
plt.xlabel("Hours Studied")
plt.ylabel("Percentage scores")
plt.show()

X = df.iloc[:, :-1].values  
y = df.iloc[:, 1].values  

from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) 


# Training *of* Model 

from sklearn.linear_model import LinearRegression


regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting test data
plt.scatter(X, y)
plt.plot(X, line,color='red');
plt.show()

# Testing data
print(X_test)
# Model Prediction 
y_pred = regressor.predict(X_test)

y_pred

# **Prediction of Model**

# Actual value vs Predicted value
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}) 
df 

# **mean absolute error**

from sklearn.metrics import mean_absolute_error
print('Mean absolute error: ',mean_absolute_error(y_test,y_pred))


# **Testing the model with our own data**

hours = [9.25]
ans = regressor.predict([hours])

ans

# ***Conclusion:  If a student studies for 9.25 hrs/day, the student's score will be 93.69%.***
